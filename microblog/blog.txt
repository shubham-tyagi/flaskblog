*** this is about SECRET_KEY used in config.py ***

The value of the secret key is set as an expression with two terms, joined by the or operator.
 The first term looks for the value of an environment variable, also called SECRET_KEY. 
 The second term, is just a hardcoded string. 
 This is a pattern that you will see me repeat often for configuration variables. 

----------------------------------------------------------

@login.user_loader reason why is it used
 The idea is that a value sourced from an environment variable is preferred, but if the environment 
 does not define the variable, then the hardcoded string is used instead. When you are developing this 
 application, the security requirements are low, so you can just ignore this setting and let the hardcoded
 string be used. But when this application is deployed on a production server, I will be setting a unique
 and difficult to guess value in the environment, so that the server has a secure key that nobody else
 knows.

 Because Flask-Login knows nothing about databases, it needs the application's help in loading a user. For 
 that reason, the extension expects that the application will configure a user loader function, that can be
    called to load a user given the ID. This function can be added in the app/models.py module:
--------------------------------------------------------------------
op
login = LoginManager(app)
login.login_view = 'login'

Flask-Login provides a very useful feature that forces users to log in before they can view certain pages 
of the application. If a user who is not logged in tries to view a protected page, Flask-Login will
automatically redirect the user to the login form, and only redirect back to the page the user wanted to 
view after the login process is complete.

For this feature to be implemented, Flask-Login needs to know what is the view function that handles 
logins. This can be added in app/__init__.py:

----------------------------------------------------------------------

if not next_page or url_parse(next_page).netloc != '': # what is it means in this line..?
            next_page = url_for('index')

Now coming to your code, the if statement checks whether or not the next_page exists and whether the 
next_page has a netloc. In that login() function, checking if .netloc != '', means that it is checking 
whether the result of url_parse(next_page) is a relative url. A relative url has a path but no hostname 
(and thus no netloc). ;)

---------------------------------------------------------------------------
@before_request

The @before_request decorator from Flask register the decorated function to be executed right before the 
view function. This is extremely useful because now I can insert code that I want to execute before any 
view function in the application, and I can have it in a single place. The implementation simply checks 
if the current_user is logged in, and in that case sets the last_seen field to the current time. I 
mentioned this before, a server application needs to work in consistent time units, and the standard 
practice is to use the UTC time zone.

-----------------------------------------------------------------------------------
return render_template('404.html'), 404

the reason why 404 is used here
For all the view functions that I created so far, I did not need to add a second return value because 
the default of 200 (the status code for a successful response) is what I wanted. In this case these are 
error pages, so I want the status code of the response to reflect that.

--------------------------------------------------------------------------------------
use of log files

As a first interesting use of the log file, the server writes a line to the logs each time it starts. When this application runs 
on a production server, these log entries will tell you when the server was restarted.

--------------------------------------------------------------------------------------
Why token is used and there work ?

As you can see the resulting token is a long sequence of characters. But do not think that this is an 
encrypted token. The contents of the token, including the payload, can be decoded easily by anyone 
(don't believe me? Copy the above token and then enter it in the JWT debugger to see its contents). 
What makes the token secure is that the payload is signed. If somebody tried to forge or tamper with 
the payload in a token, then the signature would be invalidated, and to generate a new signature the 
secret key is needed. When a token is verified, the contents of the payload are decoded and returned 
back to the caller. If the token's signature was validated, then the payload can be trusted as 
authentic.